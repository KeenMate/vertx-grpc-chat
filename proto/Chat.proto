syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.keenmate.chat";
option java_outer_classname = "ChatProto";
option objc_class_prefix = "HLW";

package com.keenmate.chat;

import "Common.proto";
import "User.proto";

service ChatProvider {
	rpc CreateRoom (NewRoomRequest) returns (Room);
	rpc JoinRoom (JoinRoomRequest) returns (Messages);
	rpc RemoveRoom (Room) returns (Empty);
	rpc GetRooms (Empty) returns (stream Room);
	rpc GetClientsForRoom (Int32Message) returns (Clients);

	rpc GetMessages (StringMessage) returns (stream ChatChange);

	rpc SendMessage (Message) returns (Empty);

	// todo: Ability to send/receive invitations (for private rooms (p2p communication))
}

message Messages {
	repeated Message messages = 1;
}

message Clients {
	repeated Client clients = 1;
}

message NewRoomRequest {
	string title = 1;
	bool private = 2;
	string creatorGuid = 3;
}

message JoinRoomRequest {
	int32 roomId = 1;
	string clientGuid = 2;
}

message Room {
	int32 roomId = 1;
	string title = 2;
	/*
		whether the room is intended for just p2p communication
		todo: how to inform target client that invitation came? - maybe another server-stream
		todo: accept/reject capabilities
	*/
	bool private = 3;
	Client creator = 4;
}

message ChatChange {
	oneof theChange {
		// either new message or modified
		// modified one will have existing Id which should exist on client
		Message msg = 1;
		// new Client joined the room
		Client clientConnected = 2;
		// Client disconnected from the room
		Client clientDisconnected = 3;
	}

	int32 roomId = 4;
}

message Message {
	int32 messageId = 1;
	string creatorGuid = 2;
	reserved 3;
	int32 roomId = 4;
	string content = 5;
	// date when the message arrives at server
	int64 sent = 6;
}
